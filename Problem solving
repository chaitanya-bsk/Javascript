
// Finding Duplicates 

let arr = [1,2,5,5,2,1];
 let duplicatecount={};

 for ( i=0; i<arr.length; i++){
     console.log(duplicatecount[arr[i]]);
     if (!duplicatecount[arr[i]]){
         console.log(!duplicatecount[arr[i]]);
         duplicatecount[arr[i]] =1 ;
     }
     else{
         console.log(!duplicatecount[arr[i]]);
         duplicatecount[arr[i]] +=1 ;
     }
    }
 console.log(duplicatecount);


let arr = [1,2,3,4];
let duplicatecount= { '1': 5, '2': 6, '5': 8 };
console.log(!duplicatecount[3]);

//duplicatecount[2] -> it will search for key word (2) in the disctionary and it will return its value associated with it (6);
//!duplicatecount[2] -> it will return "false" as the key value of 2 is exisiting  
//!duplicatecount[3] -> it will return "true" as the key value doesnt exist


// Priniting Even Numbers -
for (i=0;i<20;i++){
    if (i%2==0){
        console.log(i)
    }

};

// Getting first set of array of value -
var first =  (array, n) => {
    if (array == null) 
        return void 0;
    if (n == null) 
        return array[0];
    if (n < 0)
        return [];
  return array.slice(0, n);
};

console.log(first([7, 9, 0, -2],31));
console.log(first([],3));

// Joining array - 
myColor = ["Red", "Green", "White", "Black"];
console.log(myColor.toString()); - Red,Green,White,Black
console.log(myColor.join()); Red,Green,White,Black
console.log(myColor.join('+')); Red+Green+White+Black

// JavaScript function to check whether an `input` is an array or not
myColor = ["Red", "Green", "White", "Black"];
var is_array = function(input){
    if(toString.call(input)== "[object Array]")
        return true;
    return false;
};
console.log(is_array(myColor)); true
console.log(toString.call(myColor)); - [object Array]
console.log(Array.isArray(myColor)); - true

/theory/ toString.call
const arr = [1,2,3,4,5]
Object.prototype.toString.call(arr) // returns "[object Array]"
const str = 'test'
str.toString() // returns 'test'
Object.prototype.toString.call(str) // returns "[object String]"

/ES6 - version /-
var is_array = input => {
  if (toString.call(input) === "[object Array]")
    return true;
  return false;   
    };

// clonearray

var clonearray = function (input) {
    return input.slice(0);
};
var clonearray = input => input.slice(0);
let y = [...myColor];
let y2 = Array.from(myColor);
let y3 = myColor.slice();
let y4 = myColor.map(i => i);
let y5 = myColor.filter(() => true);

//Insert dashes (-) between each two even digits 
const num = 5447743;
const number = num.toString();
const result = [number[0]]; - if result is given as number[0], string , then push. will give push is not defined as it supports only arrays 
console.log(typeof(result));

for (let x=1;x<number.length; x++ ) {
    if ((number[x-1]%2==0)&&(number[x]%2==0))
        {result.push('-',number[x])}
    else
    {result.push(number[x]);}
}
console.log(result.join(''));

Sorting - 
var arr=[-3,8,7,6,5,-4,3,2,1];
var arr2=[];
var min = arr[0];
var temp;
var max= arr[0];

for (i=0;i<arr.length;i++){
    if (max<arr[i]) max = arr[i];
}

for (var i=0; i<arr.length;i++){

    for (var j=0; j<arr.length;j++){
        if (arr[j]!="x")
        {
            if (min>arr[j])
            {
                min=arr[j];
                temp=j;

            }
        }
    }
    arr2[i]=min;
    arr[temp]="x";
    min=max;
}
console.log(arr2);


# counting maximum occurring
var arr1=[3, 'a', 'a', 'a', 2, 3, 'a', 3, 'a', 2, 4, 9, 3];
var mf = 1;
var m = 0;
var item;
for (var i=0; i<arr1.length; i++)
{
        for (var j=i; j<arr1.length; j++)
        {
                if (arr1[i] == arr1[j])
                 m++;
                if (mf<m)
                {
                  mf=m; 
                  item = arr1[i];
                }
        }
        m=0;
}
console.log(item+" ( " +mf +" times ) ") ;


Reverse String -
str = "fdsfgs"
length = len(str)
print(length)
new_str = "";
while length > 0:
    new_str = new_str + str[length-1]
    length = length-1
    print(new_str)
    
    
Maximum profit - selling only once  - keep identifying the minimum and maximum 
stock = [3,25,1,3,5,8,19,1,31];

function maxStockProfit (stock) {
    let minSoFar = stock[0];
    let maxProfit = 0;
    let profit = 0;

    for (let i=1; i < stock.length ; i++){
        if (minSoFar < stock[i]){
            profit =  stock[i]-minSoFar;
            maxProfit = Math.max(maxProfit,profit);
        }else {
            minSoFar = stock[i]
        }
    }
    return maxProfit;
};

console.log(maxStockProfit(stock));


Maximum profit - selling multiple times - keep checking local maxima and local minima
stock = [3,25,1,3,5,8,19,1,31];

function maxStockProfitMultipleSell (stock) {
    let minSoFar = stock[0];
    let totalProfit = 0;
    let profit =0;


    for (let i=1; i< stock.length ; i++){
        if (minSoFar<stock[i]){
            maxSoFar = stock[i];
            profit = maxSoFar-minSoFar;
            totalProfit += profit;
            minSoFar = stock[i];
        }else{          
            minSoFar = stock[i];
        }
    }
    return totalProfit;
};
console.log(maxStockProfitMultipleSell(stock));


Another simple way - just check i and i-1 and keep iterating 
function maxStockProfitMultipleSell (stock) {
    for (let i=1; i< stock.length ; i++){
        if (stock[i-1]<stock[i]){
            profit = stock[i]-stock[i-1];
            totalProfit += profit;
            minSoFar = stock[i];
        }else{          
            minSoFar = stock[i];
        }
    }
    return totalProfit;
};
console.log(maxStockProfitMultipleSell(stock));

let price = [100, 180, 260, 310, 40, 535, 695];
let n = price.length;

function stockBuySell(price, n) {
    // Prices must be given for at least two days
    if (n == 1)
        return;

    // Traverse through given price array
    let i = 0;
    while (i < n - 1) {

        // Find Local Minima
        // Note that the limit is (n-2) as we are
        // comparing present element to the next element
        while ((i < n - 1) && (price[i + 1] <= price[i]))
            i++;

        // If we reached the end, break
        // as no further solution possible
        if (i == n - 1)
            break;

        // Store the index of minima
        let buy = i++;

        // Find Local Maxima
        // Note that the limit is (n-1) as we are
        // comparing to previous element
        while ((i < n) && (price[i] >= price[i - 1]))
            i++;

        // Store the index of maxima
        let sell = i - 1;

        console.log(`Buy on day: ${buy}  â€ƒ
     Sell on day: ${sell}`);
    }
}

// binary search - take half and then check for value , 
function binarySearch(arr,target){
    let leftIndex = 0
    let rightIndex = arr.length - 1

    while (leftIndex <= rightIndex){
        let middleIndex = Math.floor((leftIndex+rightIndex)/2)
        //console.log(middleIndex)
        if (target===arr[middleIndex]){
            return middleIndex
        }
        if (target< arr[middleIndex]){
            rightIndex = middleIndex-1
        }
        else {
            leftIndex = middleIndex+1
        }
        
    }
    
}

console.log(binarySearch([1,4,6,7,89,92],92))
console.log(binarySearch([1,4,6,7,89,92],6))

// Check if it is a String - if (Object.prototype.toString.call(input)==='[object String]')
//split string with space - return input.trim().split(" ")
// slice with characters - return input.slice(3, length);

// multiple names 
var split_names = input.trim().split(" ") - this will give split 
 if (split_names.length>1){
    return split_names[0] + " " + split_names[1].charAt(0) + "."

// convert to lower case and replace spaces with "-" -> return str1.trim().toLowerCase().replace(/[^a-zA-Z0-9 -]/, "").replace(/\s/g, "-");
// convert first letter to capital - str1.charAt(0).toUpperCase() + str1.slice(1); 
// add mukltipe times - Array(count + 1).join("test")


const count_duplicate_characters = function(str) {
    
    var arr = {}

    for (let i = 0; i < str.length; i++) {

        if (Object.keys(arr).includes(str[i])) {
            arr[str[i]] = arr[str[i]] + 1
            continue
        }
        
        arr[str[i]] = 1
    }
    return arr
    
}

const reverse = function(string) {
    return string.split(' ').map(function (item) {
        return item.split('').reverse().join('');
    }).join(' ');
}


const is_palindrome = function(str) {

    var left = 0
    var right = str.length - 1

    while (right > left) {

        if (str.charAt(left) != str.charAt(right)) {
            return false
        }
        
        left++
        right--
    }
    
    return true

}
OR 
return str == str.split('').reverse().join('')


classes-
class Pen {
  constructor(name, color, price){
      this.name = name;
      this.color = color; 
      this.price = price;
  }
  
  showPrice(){
      console.log(`Price of ${this.name} is ${this.price}`);
  }

  testPrice(){
    console.log( this.showPrice());
  }

  greet = function () {
    return ('Hello' + ' ' + this.name);
}
}

const pen1 = new Pen("Marker", "Blue", "$3");
const pen2 = new Pen("pencil", "red", "$5");
pen1.showPrice();
pen1.testPrice();
pen2.showPrice();
pen2.testPrice();
console.log(pen2.greet());

Getter / setter - 
class Person {
  constructor(name) {
      this.name = name;
  }

  // getter
  get personName() {
      return this.name;
  }

  // setter
  set personName(x) {
      this.name = x;
  }
}

let person1 = new Person('Jack');
console.log(person1.name); // Jack

// changing the value of name property
person1.personName = 'Sarah';
console.log(person1.name); // Sarah
console.log(person1.name);

Call back functions - 

function testcallback (name, callfunction){
  console.log(name +" " + "call below function" )
  callfunction()
}

function newfunction () {
  console.log("i am call back")
}
// passing function as an argument
testcallback('hello', newfunction);

promise
then().
then().
catch()
finally will execute after promise resolved or rejected 

type of //
const geeks = {
  name: "Shubham",
  age: 21,
  Intern: "Geeksoforgeeks",
  Place: "Work from Home"
};

const geek = JSON.stringify(geeks);
console.log(typeof(geek)) - string
console.log(typeof(geeks)) - object

console.log(typeof(geek))
console.log((Object.keys(geeks)))
console.log((Object.values(geeks)))
